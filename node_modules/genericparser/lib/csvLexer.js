var events = require('events');
var util = require('util');
var fs = require("fs");

var CsvLexer = function() {
    events.EventEmitter.call(this);
    return this;
}

util.inherits(CsvLexer, events.EventEmitter);

CsvLexer.prototype.error = function(e) {
    this.emit("error", e);
    return this;
}

 /*
  CsvLexer.parseLines(lines)
  --------------------------
  
 Take an array of two elements and construct the options for a csv file.
 Emit an done event with an option parameter 
 the options returned are : 
 
  *   `delimiter`     Set the field delimiter. One character only. Default to ,
  *   `quote`         Optionnal character surrounding a field. One character only. Default to "
  *   `escape`        Set the escape character, one character only. Default to "

 */
CsvLexer.prototype.parseLines = function(lines) {
    if (!this.emit)
        return this;
    if (!lines || !lines.length || lines.length != 2)
        return this.error(new Error("Invalid parameter on lines"));
     this.options = {"delimiter": ",", "quote": "\"", "escape": "\""};
    if (lines[0].indexOf('\'') > -1)
        this.options.quote = '\'';
    else if (lines[0].indexOf('\"') > -1)
        this.options.quote = '\"';
    var delimiter = {",": 0, ";": 0, ":": 0, "\t": 0};
    delimiter[","] = lines[0].split(",").length - 1;
    delimiter[";"] = lines[0].split(";").length - 1;
    delimiter[":"] = lines[0].split(":").length - 1;
    delimiter["\t"] = lines[0].split("\t").length- 1;
    var delimiterFound = ",";
    var timesOccured = 0;
    for (var key in delimiter) {
        if (timesOccured < delimiter[key]) {
            timesOccured = delimiter[key];
            delimiterFound = key;
        }
    }
    if (delimiterFound != ",")
        this.options.delimiter = delimiterFound;
    var appear = lines[1].split(delimiterFound).length - 1;
    if (timesOccured != appear)
        this.error(new Error("Csv file not well formated : you have a different number of separators between lines (you have "+ timesOccured + " times [" + delimiterFound + "] But appear "+ appear +  " times in the second line ) "));
    this.emit("done", this.options);
}

 /*
  CsvLexer.extractLine(pinput, callback)
  --------------------------------------
  
  Extract from a pinput path the two first lines of a file. 
  Call the callback parameter with one parameter (lineToParse)
  This is an array containing two entries. 
 */
CsvLexer.prototype.extractLines = function(pinput, callback) {
    var that = this;
    var buffer = new Buffer(1024);
     var lineToParse = [];
    fs.open(pinput, 'r', function(err, fd) {
        fs.read(fd, buffer, 0, 1024, 0, function(err, bytesRead, buffer) {
            var lines = buffer.toString('utf8', 0, bytesRead).split("\n");
            if (lines[0] && lines[1]) {
                lineToParse.push(lines[0]);
                lineToParse.push(lines[1]);
                if (callback)
                    callback(lineToParse);
            }
        });
        fs.close(fd);
    });
    return lineToParse;
};

CsvLexer.prototype.parse = function(pinput) {
   var that = this;
    this.extractLines(pinput, function(result) {
        that.parseLines(result);
    });
    return this;
}

module.exports = CsvLexer;