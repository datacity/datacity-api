var fs = require('fs');
var csv = require('csv');
var lineDelim = 1;
function guessDelimiters(text, possibleDelimiters) {
    return possibleDelimiters.filter(weedOut);

    function weedOut (delimiter) {
        var cache = -1;
       
        return text.split('\n').every(checkLength);

        function checkLength (line) {
            if (!line) {
                return true;
            }
            var length = line.replace(/"[^"]*"/g,"").split(delimiter).length;
            if (cache < 0) {
                cache = length;
            }
            lineDelim++;  
            if ((cache === length && length > 1) === false && lineDelim > 3) {
                //console.log("Error on line :" + lineDelim + " with delimiter : [" + delimiter + "]. (expecting : " + cache + " but got : " + length + ")");
                lineDelim = 1;
            }
             
            return cache === length && length > 1;
        }
    }
}

function parserCSV() {
    this.parse = parseCSV;
    return this;
}

function parseCSV(fileName, callback) {
    var keys = [];
    var delimiter = "";

    if (fs.existsSync(fileName) === false) {
        console.log("erreur : le fichier n'existe pas !");
        return;
    }
    fs.readFile(fileName, "utf8", function(err, data) {
        delimiter = guessDelimiters(data , [",", ";", "/", "\t", ":"]);
        
        if (delimiter.length === 0) {
            console.log("erreur : pas de délimiteur détecté");
        return;
        }
        else {
            delimiter = delimiter[0];
        }
        csv()
        .from.path(fileName, { delimiter: delimiter, escape: '"' })
        .on('record', function(row,index){
          if (index === 0) {
              keys = row;
          }
          else {
              var tmp = {};
              for (var i in row) {
                  tmp[keys[i]] = row[i];
              }
              if (callback)
                callback(tmp, index);
              //output.push(tmp);
          }
        })
        .on('end', function(count) {
         if (callback)
             callback(null, count);
        })
        .on('error', function(error){
          console.log(error.message);
        });
   });
}

module.exports = parserCSV;