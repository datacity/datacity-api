var Converter = require("csvtojson").core.Converter;
var Lexer = require("./csvLexer");
var Stream = require('stream');
var CsvAdv = new Converter(true);
var fs = require("fs");
var CsvParser = function() {};


CsvAdv.to = function(output) {
    var error = false;
    switch(typeof output) {
        case 'string':
                CsvAdv.to.stream(fs.createWriteStream(output), CsvAdv);
            break;
        case "object": 
            if (output instanceof Stream) {
               CsvAdv.to.stream(output, CsvAdv);
            }
            else
                error = true;
            break;
        case 'function':
            CsvAdv.to.string(output, CsvAdv);
            break;
        default:
            error = true;
    }
    if (error) 
        this.error(new Error("Invalid mixed argument in to"));
};

CsvAdv.to.stream = function(output, that) {
    that.on("readytoread", function() {
        output.write('{"csvRows":[');
        var started = false;
        that.on("record_parsed", function(resultRow, row, index) {
            if (started)
                output.write(",");
            output.write(JSON.stringify(resultRow));
            if (false === started)
                started = true;
        });
        that.on("end", function() {
            output.write("]}");
        });  
    });
   return this;
};

CsvAdv.to.string = function(output) {
};

CsvParser.prototype.from = function(input) {
    var lex = new Lexer();
    lex.parse(input).on("done", function(options) {
        CsvAdv.from(input, {
            "delimiter" : options.delimiter,
            "quote": options.quote,
            "escape": options.escape,
            "encoding": "binary"
        });
        CsvAdv.emit("readytoread");
    });
     return CsvAdv;
};

module.exports = CsvParser;