var fs = require("fs");
var events = require("events");
var chardet = require('chardet');
var Iconv = require("iconv").Iconv;

function serializeJSON(currentKey, currentObject, result, isArray, isObject) {
    for (var key in currentObject) {
        if (isNaN(parseInt(key)) === false && (typeof currentObject[key] === "string" || typeof currentObject[key] === "number")) {
             result[currentKey] = [];
             result[currentKey] = currentObject;
             break;
        }
        else if ((typeof currentObject[key] === "string" || typeof currentObject[key] === "number") && isArray === false)
            currentKey === "" ? result[key] = currentObject[key] : result[currentKey+"_"+key] = currentObject[key];
        else if ((typeof currentObject[key] === "string" || typeof currentObject[key] === "number") && isArray === true) {
            if (!result[currentKey+"_"+key]) {
                result[currentKey+"_"+key] = [];
                result[currentKey+"_"+key].push(currentObject[key]);
            }
            else
                result[currentKey+"_"+key].push(currentObject[key]);
        }
        if (currentObject[key] instanceof Array && isObject === true)
            serializeJSON(currentKey+"_"+key, currentObject[key], result, false);
        else if (currentObject[key] instanceof Array && isObject === false) 
            serializeJSON(key, currentObject[key], result, true, false);
        else if (currentObject[key] instanceof Object && isArray === false && isObject === true)
            serializeJSON(currentKey+"_"+key, currentObject[key], result, false, true);
        else if (currentObject[key] instanceof Object && isArray === false)
            serializeJSON(key, currentObject[key], result, false, true);
        else if (currentObject[key] instanceof Object && isArray === true)
            serializeJSON(currentKey, currentObject[key], result, true, true);
    }
}

function parseJSON(fileName, noRam, callback) {
      if (fs.existsSync(fileName) === false) {
        this.emit("error", new Error("erreur : le fichier n'existe pas !"));
        return;
    }
    var stream = fs.createReadStream(fileName);
    
    var lines = 1;
    var that = this;
    var main = [];
    var type = chardet.detectFileSync(fileName);
    console.log(type);
    
    stream.on('data', function(sdata) {
        var iconv = new Iconv(type, 'UTF-8');
        sdata = iconv.convert(sdata).toString("utf8");
        console.log(sdata);
        var json = JSON.parse(sdata.replace(/\\/g, ""));
        
        var result = {};
        var keys = Object.keys(json);
    
        for (var index in keys ) {
            if (json[keys[index]] instanceof Array) {
                if (json[keys[index]][0] && json[keys[index]][0] instanceof Object) {
                    for (var obj in json[keys[index]]) {
                        result = {};
                        serializeJSON("", json[keys[index]][obj], result, false, false);
                        if (noRam === true && callback) 
                           callback(result, lines);
                        else if (noRam === false)
                           main.push(result);
                         lines++;
                   }
                   break;
                }
              }
         }
    })
    .on("end", function() {
      if (callback) {
          if (noRam === true)
            callback(null, lines);
          else 
            callback(main, lines);
      }
    })
    .on('error', function(error){
          that.emit("error", new Error("erreur pendant la lecture du flux dans le parseur json"))
    });
}


function parseJSONString(str, noRam, callback) {
  var lines = 1;
  var that = this;
  var main = [];
  var result = {};

  var json = JSON.parse(str);
  var keys = Object.keys(json);

  for (var index in keys ) {
      if (json[keys[index]] instanceof Array) {
          if (json[keys[index]][0] && json[keys[index]][0] instanceof Object) {
              for (var obj in json[keys[index]]) {
                  result = {};
                  serializeJSON("", json[keys[index]][obj], result, false, false);
                  if (noRam === true && callback) {
                     callback(result, lines);
                   }
                  else if (noRam === false) {
                     main.push(result);
                   }
                   lines++;
             }
          }
        }
   }
   console.log("lines = " + lines);
   callback(main, lines);
}

function parserJSON() {
    this.parse = parseJSON;
    this.parseString = parseJSONString;
    return this;
}

parserJSON.prototype.__proto__ = events.EventEmitter.prototype;
module.exports = parserJSON;